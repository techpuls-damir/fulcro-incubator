(ns fulcro.incubator.routing-ws
  (:require
    [nubank.workspaces.core :as ws]
    [fulcro.client.primitives :as prim :refer [defsc]]
    [fulcro.client.mutations :refer [defmutation]]
    [fulcro.client.routing :as fr :refer [defrouter]]
    [fulcro.server :as server]
    [fulcro-spec.core :refer [specification assertions]]
    [fulcro.incubator.pessimistic-mutations :as pm]
    [fulcro.client.dom :as dom]
    [nubank.workspaces.model :as wsm]
    [nubank.workspaces.card-types.fulcro :as ct.fulcro]
    [nubank.workspaces.lib.fulcro-portal :as f.portal]
    [fulcro.client.mutations :as m]
    [fulcro.client.data-fetch :as df]))


;; Part of library
(def module-registry (atom {}))
(defn module-ident [props-or-id]
  (if (map? props-or-id)
    [(::module-key props-or-id) :placeholder]
    [props-or-id :placeholder]))

;; Main Module
;; GENERATED by new router macro:

(defsc Module1Placeholder [_ props]
  {:ident         (fn [] (module-ident props))
   :query         [::module-key]
   :initial-state {::module-key ::module-1}}
  (when-let [factory (get @module-registry ::module-1)]
    (factory props)))

(defsc Module2Placeholder [_ props]
  {:ident         (fn [] (module-ident props))
   :query         [::module-key]
   :initial-state {::module-key ::module-2}}
  (when-let [factory (get @module-registry ::module-2)]
    (factory props)))

(defsc Preloaded [this props]
  {:query         [::module-key]
   :ident         (fn [] (module-ident props))
   :initial-state {::module-key ::main-module}}
  (dom/div nil "Main Preloaded Route...could be dynamically loaded as well"))

(defrouter TopRouter ::top-router
  (fn [this props] (module-ident props))
  ::main-module Preloaded
  ::module-1 Module1Placeholder
  ::module-2 Module2Placeholder)

(def ui-router (prim/factory TopRouter))

;; SIMULATION: These two decls would be called by code IN the modules as they load, but we need them here to make the
;; buttons for our sim
(declare module-1-loaded module-2-loaded)

(defsc Root [this {:keys [router]}]
  {:query         [{:router (prim/get-query TopRouter)}]
   :initial-state {:router {}}}
  (dom/div
    (dom/h1 "Router Demo")
    (dom/button {:onClick (fn []
                            (module-1-loaded this)
                            (prim/transact! this `[(fr/set-route ~{:router ::top-router
                                                                   :target (module-ident ::module-1)})]))}
      "Simulate module 1 loading")
    (dom/button {:onClick (fn []
                            (module-2-loaded this)
                            (prim/transact! this `[(fr/set-route ~{:router ::top-router
                                                                   :target (module-ident ::module-2)})]))}
      "Simulate module 2 loading")
    (dom/button {:onClick (fn []
                            (prim/transact! this `[(fr/set-route ~{:router ::top-router
                                                                   :target (module-ident ::module-1)})]))}
      "Route to 1 (after simulating load)")
    (dom/button {:onClick (fn []
                            (prim/transact! this `[(fr/set-route ~{:router ::top-router
                                                                   :target (module-ident ::module-2)})]))}
      "Route to 2 (after simulating load)")
    (ui-router router)))

;; internal code to load/swap between modules

(ws/defcard router-demo-card
  {::wsm/card-width  2
   ::wsm/align       {:flex 1}
   ::wsm/card-height 13}
  (ct.fulcro/fulcro-card
    {::f.portal/root       Root
     ::f.portal/wrap-root? false
     ::f.portal/app        {:started-callback (fn [{:keys [reconciler]}])
                            :networking       (server/new-server-emulator (server/fulcro-parser) 300)}}))

;; Module 1

(defsc Child1 [_ {:keys [child/name]}]
  {:ident         [:child/id :child/id]
   :query         [:child/id :child/name]
   :initial-state {:child/id 1 :child/name "Howard"}}
  (dom/div (str "Child 1" name)))

(def ui-child1 (prim/factory Child1))

(defsc AltScreen1 [_ {:keys [some-child]}]
  {:ident (fn [] [:alt-screen1 :tab])
   :query [{:some-child (prim/get-query Child1)}]}
  (ui-child1 some-child))

(defn module-1-loaded [reconciler]
  (prim/set-query! reconciler Module1Placeholder {:query [::module-key {::screen (prim/get-query AltScreen1)}]})
  (swap! module-registry assoc ::module-1 (prim/factory AltScreen1)))

;; Module 2

(defsc Thing [_ {:keys [thing/name]}]
  {:ident         [:thing/id :thing/id]
   :query         [:thing/id :thing/name]
   :initial-state {:thing/id 1 :thing/name "Toaster"}}
  (dom/div (str "Thing: " name)))

(def ui-thing (prim/factory Thing))

(defsc AltScreen2 [_ {:keys [some-thing]}]
  {:ident (fn [] [:alt-screen1 :tab])
   :query [{:some-thing (prim/get-query Thing)}]}
  (ui-thing some-thing))

(defn module-2-loaded [reconciler]
  (prim/set-query! reconciler Module2Placeholder {:query [::module-key {::screen (prim/get-query AltScreen2)}]})
  (swap! module-registry assoc ::module-2 (prim/factory AltScreen2)))

